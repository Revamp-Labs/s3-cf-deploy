"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkProvider = void 0;
exports.cached = cached;
exports.enableTracing = enableTracing;
const aws_auth_1 = require("./api/aws-auth");
const io_host_1 = require("./cli/io-host");
/**
 * @deprecated
 */
function cached(obj, sym, fn) {
    if (!(sym in obj)) {
        obj[sym] = fn();
    }
    return obj[sym];
}
/**
 * Enable tracing in the CDK
 *
 * @deprecated cannot be enabled from outside the CDK
 */
function enableTracing(_enabled) {
    // noop
}
/**
 * @deprecated
 */
class SdkProvider {
    static async withAwsCliCompatibleDefaults(options = {}) {
        return aws_auth_1.SdkProvider.withAwsCliCompatibleDefaults({
            ...options,
            ioHelper: io_host_1.CliIoHost.instance().asIoHelper(),
        });
    }
    constructor(defaultCredentialProvider, defaultRegion, requestHandler = {}, logger) {
        return new aws_auth_1.SdkProvider(defaultCredentialProvider, defaultRegion, requestHandler, io_host_1.CliIoHost.instance().asIoHelper(), logger);
    }
}
exports.SdkProvider = SdkProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWF3cy1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGVnYWN5LWF3cy1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWVBLHdCQUtDO0FBdUJELHNDQUVDO0FBcENELDZDQUEwRTtBQUMxRSwyQ0FBMEM7QUFFMUM7O0dBRUc7QUFDSCxTQUFnQixNQUFNLENBQXNCLEdBQU0sRUFBRSxHQUFXLEVBQUUsRUFBVztJQUMxRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNqQixHQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELE9BQVEsR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFrQkQ7Ozs7R0FJRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxRQUFpQjtJQUM3QyxPQUFPO0FBQ1QsQ0FBQztBQTZDRDs7R0FFRztBQUNILE1BQWEsV0FBVztJQUNmLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsVUFBOEIsRUFBRTtRQUMvRSxPQUFPLHNCQUF5QixDQUFDLDRCQUE0QixDQUFDO1lBQzVELEdBQUcsT0FBTztZQUNWLFFBQVEsRUFBRSxtQkFBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRTtTQUM1QyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFDRSx5QkFBd0QsRUFDeEQsYUFBcUIsRUFDckIsaUJBQXlDLEVBQUUsRUFDM0MsTUFBZTtRQUVmLE9BQU8sSUFBSSxzQkFBeUIsQ0FBQyx5QkFBeUIsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLG1CQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUksQ0FBQztDQUNGO0FBaEJELGtDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgYSBsZWdhY3kgd3JhcHBlciBmb3IgY29kZSBmcm9tIHRoZSBhd3MtYXV0aCB0aGF0IHdlIHdhbnQgdG8ga2VlcCB0aGUgc2lnbmF0dXJlcyBpbnRhY3Rcbi8vIFdlIGdlbmVyYWxseSB1c2UgdHdvIGRpZmZlcmVudCBwYXR0ZXJucyBoZXJlOlxuLy8gLSBtYWtlIGEgY29weSBvZiB0aGUgb2xkIGNvZGUgYXMgaXNcbi8vIC0gd3JhcCB0aGUgb2xkIGNvZGUgYW5kIGFkZCBhIGRlcHJlY2F0aW9uIHdhcm5pbmdcbi8vIC0gbWFrZSBhIG5vLW9wIGNvcHkgdGhhdCBwcmVzZXJ2ZXMgdGhlIHByZXZpb3VzIGludGVyZmFjZSBidXQgZG9lc24ndCBkbyBhbnl0aGluZ1xuLy8gVGhpcyB3YXkgd2UgY2FuIGtlZXAgdGhlIG9sZCBjb2RlIHJ1bm5pbmcgdW50aWwgdGhlIG5ldyBjb2RlIGlzIGZ1bGx5IHJlYWR5XG4vLyBhbmQgY2FuIGJlIHVzZWQgYnkgdGhlIHVzZXJzIHRoYXQgYXJlIHJlYWR5IHRvIG1pZ3JhdGVcbi8vIFRoZSBvbGQgY29kZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBhd3MtY2RrXG5pbXBvcnQgdHlwZSB7IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyLCBMb2dnZXIsIE5vZGVIdHRwSGFuZGxlck9wdGlvbnMgfSBmcm9tICdAc21pdGh5L3R5cGVzJztcbmltcG9ydCB7IFNka1Byb3ZpZGVyIGFzIFNka1Byb3ZpZGVyQ3VycmVudFZlcnNpb24gfSBmcm9tICcuL2FwaS9hd3MtYXV0aCc7XG5pbXBvcnQgeyBDbGlJb0hvc3QgfSBmcm9tICcuL2NsaS9pby1ob3N0JztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVkPEEgZXh0ZW5kcyBvYmplY3QsIEI+KG9iajogQSwgc3ltOiBzeW1ib2wsIGZuOiAoKSA9PiBCKTogQiB7XG4gIGlmICghKHN5bSBpbiBvYmopKSB7XG4gICAgKG9iaiBhcyBhbnkpW3N5bV0gPSBmbigpO1xuICB9XG4gIHJldHVybiAob2JqIGFzIGFueSlbc3ltXTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRQcm92aWRlclBsdWdpbiB7XG4gIGdldFZhbHVlKGFyZ3M6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogUHJvbWlzZTxhbnk+O1xufVxuXG4vKipcbiAqIEFuIEFXUyBhY2NvdW50XG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjY291bnQge1xuICByZWFkb25seSBhY2NvdW50SWQ6IHN0cmluZztcbiAgcmVhZG9ubHkgcGFydGl0aW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRW5hYmxlIHRyYWNpbmcgaW4gdGhlIENES1xuICpcbiAqIEBkZXByZWNhdGVkIGNhbm5vdCBiZSBlbmFibGVkIGZyb20gb3V0c2lkZSB0aGUgQ0RLXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVUcmFjaW5nKF9lbmFibGVkOiBib29sZWFuKSB7XG4gIC8vIG5vb3Bcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBpbmRpdmlkdWFsIFNES3NcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmludGVyZmFjZSBTZGtIdHRwT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBQcm94eSBhZGRyZXNzIHRvIHVzZVxuICAgKlxuICAgKiBAZGVmYXVsdCBObyBwcm94eVxuICAgKi9cbiAgcmVhZG9ubHkgcHJveHlBZGRyZXNzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHBhdGggdG8gYSBjZXJ0aWZpY2F0ZSBidW5kbGUgdGhhdCBjb250YWlucyBhIGNlcnQgdG8gYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgTm8gY2VydGlmaWNhdGUgYnVuZGxlXG4gICAqL1xuICByZWFkb25seSBjYUJ1bmRsZVBhdGg/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIGRlZmF1bHQgU0RLIHByb3ZpZGVyXG4gKiBAZGVwcmVjYXRlZFxuICovXG5pbnRlcmZhY2UgU2RrUHJvdmlkZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFByb2ZpbGUgdG8gcmVhZCBmcm9tIH4vLmF3c1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIHByb2ZpbGVcbiAgICovXG4gIHJlYWRvbmx5IHByb2ZpbGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhUVFAgb3B0aW9ucyBmb3IgU0RLXG4gICAqL1xuICByZWFkb25seSBodHRwT3B0aW9ucz86IFNka0h0dHBPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBUaGUgbG9nZ2VyIGZvciBzZGsgY2FsbHMuXG4gICAqL1xuICByZWFkb25seSBsb2dnZXI/OiBMb2dnZXI7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNsYXNzIFNka1Byb3ZpZGVyIHtcbiAgcHVibGljIHN0YXRpYyBhc3luYyB3aXRoQXdzQ2xpQ29tcGF0aWJsZURlZmF1bHRzKG9wdGlvbnM6IFNka1Byb3ZpZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIFNka1Byb3ZpZGVyQ3VycmVudFZlcnNpb24ud2l0aEF3c0NsaUNvbXBhdGlibGVEZWZhdWx0cyh7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaW9IZWxwZXI6IENsaUlvSG9zdC5pbnN0YW5jZSgpLmFzSW9IZWxwZXIoKSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBkZWZhdWx0Q3JlZGVudGlhbFByb3ZpZGVyOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlcixcbiAgICBkZWZhdWx0UmVnaW9uOiBzdHJpbmcsXG4gICAgcmVxdWVzdEhhbmRsZXI6IE5vZGVIdHRwSGFuZGxlck9wdGlvbnMgPSB7fSxcbiAgICBsb2dnZXI/OiBMb2dnZXIsXG4gICkge1xuICAgIHJldHVybiBuZXcgU2RrUHJvdmlkZXJDdXJyZW50VmVyc2lvbihkZWZhdWx0Q3JlZGVudGlhbFByb3ZpZGVyLCBkZWZhdWx0UmVnaW9uLCByZXF1ZXN0SGFuZGxlciwgQ2xpSW9Ib3N0Lmluc3RhbmNlKCkuYXNJb0hlbHBlcigpLCBsb2dnZXIpO1xuICB9XG59XG4iXX0=